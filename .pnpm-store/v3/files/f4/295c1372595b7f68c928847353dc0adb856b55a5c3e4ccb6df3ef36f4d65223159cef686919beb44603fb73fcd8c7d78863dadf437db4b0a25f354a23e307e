import { defineEventHandler } from "h3";
import { getKindeClient } from "../utils/client.mjs";
import { getSession, updateSession, clearSession, useRuntimeConfig } from "#imports";
export default defineEventHandler(async (event) => {
  const sessionManager = await createSessionManager(event);
  const kindeContext = { sessionManager };
  const kindeClient = getKindeClient();
  for (const _key in kindeClient) {
    const key = _key;
    kindeContext[key] = kindeClient[key].bind(kindeClient, sessionManager);
  }
  event.context.kinde = kindeContext;
});
async function createSessionManager(event) {
  const keysInCookie = ["refresh_token", "access_token", "ac-state-key"];
  const memorySession = {};
  const config = useRuntimeConfig(event);
  const sessionConfig = {
    name: "kinde",
    cookie: config.kinde.cookie,
    password: config.kinde.password
  };
  return {
    async getSessionItem(itemKey) {
      const session = await getSession(event, sessionConfig);
      return session.data[itemKey] || memorySession[itemKey];
    },
    async setSessionItem(itemKey, itemValue) {
      if (keysInCookie.includes(itemKey)) {
        await updateSession(event, sessionConfig, {
          [itemKey]: itemValue
        });
      } else {
        memorySession[itemKey] = itemValue;
      }
    },
    async removeSessionItem(itemKey) {
      if (keysInCookie.includes(itemKey)) {
        await updateSession(event, sessionConfig, {
          [itemKey]: void 0
        });
      } else {
        delete memorySession[itemKey];
      }
    },
    async destroySession() {
      for (const key in memorySession) {
        delete memorySession[key];
      }
      await clearSession(event, sessionConfig);
    }
  };
}
